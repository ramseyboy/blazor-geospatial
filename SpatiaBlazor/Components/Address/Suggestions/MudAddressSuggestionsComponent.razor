@inherits MudAutocomplete<IGeocodeResultsViewModel>
@implements ISuggestionsView
@implements IDisposable
@inject ISuggestionsPresenter Presenter

@{
    base.BuildRenderTree(__builder);
}

@code {

    [Parameter] public AddressSuggestionsParametersViewModel? SuggestionsParameters { get; set; }
    
    private readonly CancellationTokenSource _cts = new ();

    protected override Task OnInitializedAsync()
    {
        return Presenter.InitializeAsync(this, _cts.Token);
    }

    protected override void OnParametersSet()
    {
        SuggestionsParameters ??= new AddressSuggestionsParametersViewModel();
        DebounceInterval = SuggestionsParameters.DebounceInterval;
        MinCharacters = SuggestionsParameters.MinQueryLength;
        SearchFunc = OnSearch;
        ToStringFunc = model => model?.Label();
        MaxItems = SuggestionsParameters.Limit;
        ShowProgressIndicator = true;
        ResetValueOnEmptyText = true;
        CoerceText = true;
        Immediate = true;
        AdornmentIcon = Icons.Material.Filled.Search;
        AdornmentAriaLabel = "search";
        HelperText = SuggestionsParameters.HelpText;
    }

    public void TriggerRender()
    {
        StateHasChanged();
    }

    private async Task<IEnumerable<IGeocodeResultsViewModel>> OnSearch(string query, CancellationToken token)
    {
        if (SuggestionsParameters is null || string.IsNullOrWhiteSpace(query))
        {
            return Array.Empty<IGeocodeResultsViewModel>();
        }
        SuggestionsParameters.Query = query;
        return await Presenter.AutocompleteSuggestions(token);
    }
    
    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}