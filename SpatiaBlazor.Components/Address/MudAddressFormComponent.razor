@inherits MudComponentBase
@using MudBlazor.Utilities
@using SpatiaBlazor.Components.Address.Suggestions
@using SpatiaBlazor.Components.Extensions
@implements IAddressFormView

@{
    base.BuildRenderTree(__builder);
}

<MudAddressSuggestionsComponent Value="_geocodeSelection" ValueChanged="OnSelectionChanged" Label="Find an Address"/>

@if (_geocodeSelection is not null)
{
    <MudForm @ref="_form" FieldChanged="OnFormChanged">
        <MudTextField Disabled="!AllowEdit" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.Address1"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.Address1)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.Address1))"/>

        <MudTextField Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.Address2"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.Address2)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.Address2))"/>

        <MudTextField Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.Address3"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.Address3)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.Address3))"/>

        <MudTextField Disabled="!AllowEdit" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.City"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.City)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.City))"/>

        <MudTextField Disabled="!AllowEdit" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.StateOrProvince"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.StateOrProvince)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.StateOrProvince))"/>

        <MudTextField Disabled="!AllowEdit" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.Country"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.Country)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.Country))"/>

        <MudTextField Disabled="!AllowEdit" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.Zip"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.Zip)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.Zip))"/>

        <MudTextField AutoGrow MaxLines="14" Variant="@Variant" Immediate="@Immediate" ShrinkLabel="@ShrinkLabel" @bind-Value="Value.OtherAddressDetails"
                      Label="@(Value.GetPropertyDisplay(nameof(Value.OtherAddressDetails)))"
                      Validation="Value.GetPropertyValidation(nameof(Value.OtherAddressDetails))"/>
    </MudForm>
}

@code {

    [Parameter] public bool AllowEdit { get; set; }

    [Parameter] public Variant Variant { get; set; } = Variant.Text;

    [Parameter] public bool Immediate { get; set; }

    [Parameter] public bool ShrinkLabel { get; set; }

    [Parameter]
    public AddressFormViewModel Value
    {
        get => _formViewModel;
        set => value = _formViewModel;
    }

    [Parameter] public EventCallback<AddressFormViewModel> ValueChanged { get; set; }

    private AddressFormViewModel _formViewModel = new();

    private IGeocodeResultsViewModel? _geocodeSelection;

    private MudForm? _form;

    private async Task OnFormChanged(FormFieldChangedEventArgs args)
    {
        await ValueChanged.InvokeAsync(_formViewModel);
    }

    private async Task OnSelectionChanged(IGeocodeResultsViewModel selected)
    {
        _formViewModel = new AddressFormViewModel(selected);
        _geocodeSelection = selected;
        await ValueChanged.InvokeAsync(_formViewModel);
    }

    public void TriggerRender()
    {
        StateHasChanged();
    }

    public bool IsFormValid()
    {
        return _form?.IsValid ?? false;
    }

    public async Task TriggerFormValidation()
    {
        if (_form is null)
        {
            return;
        }

        await _form.Validate();
    }

}